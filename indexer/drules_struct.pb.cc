// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drules_struct.proto

#include "drules_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_drules_5fstruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CaptionDefProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColorElementProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DashDotProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathSymProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShieldRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SymbolRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AreaRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CaptionRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CircleRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClassifElementProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ColorsElementProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PathTextRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LineDefProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LineRuleProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drules_5fstruct_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_DrawElementProto;
}  // namespace protobuf_drules_5fstruct_2eproto
class DashDotProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DashDotProto>
      _instance;
} _DashDotProto_default_instance_;
class PathSymProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathSymProto>
      _instance;
} _PathSymProto_default_instance_;
class LineRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineRuleProto>
      _instance;
} _LineRuleProto_default_instance_;
class LineDefProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineDefProto>
      _instance;
} _LineDefProto_default_instance_;
class AreaRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AreaRuleProto>
      _instance;
} _AreaRuleProto_default_instance_;
class SymbolRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolRuleProto>
      _instance;
} _SymbolRuleProto_default_instance_;
class CaptionDefProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptionDefProto>
      _instance;
} _CaptionDefProto_default_instance_;
class CaptionRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptionRuleProto>
      _instance;
} _CaptionRuleProto_default_instance_;
class CircleRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CircleRuleProto>
      _instance;
} _CircleRuleProto_default_instance_;
class PathTextRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathTextRuleProto>
      _instance;
} _PathTextRuleProto_default_instance_;
class ShieldRuleProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShieldRuleProto>
      _instance;
} _ShieldRuleProto_default_instance_;
class DrawElementProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DrawElementProto>
      _instance;
} _DrawElementProto_default_instance_;
class ClassifElementProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClassifElementProto>
      _instance;
} _ClassifElementProto_default_instance_;
class ColorElementProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColorElementProto>
      _instance;
} _ColorElementProto_default_instance_;
class ColorsElementProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColorsElementProto>
      _instance;
} _ColorsElementProto_default_instance_;
class ContainerProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContainerProto>
      _instance;
} _ContainerProto_default_instance_;
namespace protobuf_drules_5fstruct_2eproto {
static void InitDefaultsDashDotProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DashDotProto_default_instance_;
    new (ptr) ::DashDotProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DashDotProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DashDotProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDashDotProto}, {}};

static void InitDefaultsPathSymProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PathSymProto_default_instance_;
    new (ptr) ::PathSymProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PathSymProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathSymProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathSymProto}, {}};

static void InitDefaultsLineRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LineRuleProto_default_instance_;
    new (ptr) ::LineRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LineRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LineRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLineRuleProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_DashDotProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_PathSymProto.base,}};

static void InitDefaultsLineDefProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LineDefProto_default_instance_;
    new (ptr) ::LineDefProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LineDefProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LineDefProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLineDefProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_DashDotProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_PathSymProto.base,}};

static void InitDefaultsAreaRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AreaRuleProto_default_instance_;
    new (ptr) ::AreaRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AreaRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AreaRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAreaRuleProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_LineDefProto.base,}};

static void InitDefaultsSymbolRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SymbolRuleProto_default_instance_;
    new (ptr) ::SymbolRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SymbolRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolRuleProto}, {}};

static void InitDefaultsCaptionDefProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CaptionDefProto_default_instance_;
    new (ptr) ::CaptionDefProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CaptionDefProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CaptionDefProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCaptionDefProto}, {}};

static void InitDefaultsCaptionRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CaptionRuleProto_default_instance_;
    new (ptr) ::CaptionRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CaptionRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CaptionRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCaptionRuleProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_CaptionDefProto.base,}};

static void InitDefaultsCircleRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CircleRuleProto_default_instance_;
    new (ptr) ::CircleRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CircleRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CircleRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCircleRuleProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_LineDefProto.base,}};

static void InitDefaultsPathTextRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PathTextRuleProto_default_instance_;
    new (ptr) ::PathTextRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PathTextRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PathTextRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPathTextRuleProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_CaptionDefProto.base,}};

static void InitDefaultsShieldRuleProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShieldRuleProto_default_instance_;
    new (ptr) ::ShieldRuleProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShieldRuleProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShieldRuleProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShieldRuleProto}, {}};

static void InitDefaultsDrawElementProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrawElementProto_default_instance_;
    new (ptr) ::DrawElementProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrawElementProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_DrawElementProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsDrawElementProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_LineRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_AreaRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_SymbolRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_CaptionRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_CircleRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_PathTextRuleProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_ShieldRuleProto.base,}};

static void InitDefaultsClassifElementProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassifElementProto_default_instance_;
    new (ptr) ::ClassifElementProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassifElementProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClassifElementProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClassifElementProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_DrawElementProto.base,}};

static void InitDefaultsColorElementProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ColorElementProto_default_instance_;
    new (ptr) ::ColorElementProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColorElementProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColorElementProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColorElementProto}, {}};

static void InitDefaultsColorsElementProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ColorsElementProto_default_instance_;
    new (ptr) ::ColorsElementProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColorsElementProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ColorsElementProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColorsElementProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_ColorElementProto.base,}};

static void InitDefaultsContainerProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContainerProto_default_instance_;
    new (ptr) ::ContainerProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContainerProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ContainerProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsContainerProto}, {
      &protobuf_drules_5fstruct_2eproto::scc_info_ClassifElementProto.base,
      &protobuf_drules_5fstruct_2eproto::scc_info_ColorsElementProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DashDotProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathSymProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LineRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LineDefProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AreaRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptionDefProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptionRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CircleRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathTextRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShieldRuleProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DrawElementProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClassifElementProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColorElementProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColorsElementProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContainerProto.base);
}

}  // namespace protobuf_drules_5fstruct_2eproto
bool LineJoin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool LineCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DashDotProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DashDotProto::kDdFieldNumber;
const int DashDotProto::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DashDotProto::DashDotProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_DashDotProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DashDotProto)
}
DashDotProto::DashDotProto(const DashDotProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dd_(from.dd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:DashDotProto)
}

void DashDotProto::SharedCtor() {
  offset_ = 0;
}

DashDotProto::~DashDotProto() {
  // @@protoc_insertion_point(destructor:DashDotProto)
  SharedDtor();
}

void DashDotProto::SharedDtor() {
}

void DashDotProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DashDotProto& DashDotProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_DashDotProto.base);
  return *internal_default_instance();
}


void DashDotProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DashDotProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dd_.Clear();
  offset_ = 0;
  _internal_metadata_.Clear();
}

bool DashDotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DashDotProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double dd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_dd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DashDotProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DashDotProto)
  return false;
#undef DO_
}

void DashDotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DashDotProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dd = 1;
  if (this->dd_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dd_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->dd().data(), this->dd_size(), output);
  }

  // double offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->offset(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:DashDotProto)
}

size_t DashDotProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DashDotProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated double dd = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dd_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dd_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double offset = 2;
  if (this->offset() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DashDotProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DashDotProto*>(&from));
}

void DashDotProto::MergeFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DashDotProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dd_.MergeFrom(from.dd_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void DashDotProto::CopyFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DashDotProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashDotProto::IsInitialized() const {
  return true;
}

void DashDotProto::Swap(DashDotProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DashDotProto::InternalSwap(DashDotProto* other) {
  using std::swap;
  dd_.InternalSwap(&other->dd_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DashDotProto::GetTypeName() const {
  return "DashDotProto";
}


// ===================================================================

void PathSymProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathSymProto::kNameFieldNumber;
const int PathSymProto::kStepFieldNumber;
const int PathSymProto::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathSymProto::PathSymProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_PathSymProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathSymProto)
}
PathSymProto::PathSymProto(const PathSymProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&step_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:PathSymProto)
}

void PathSymProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&step_)) + sizeof(offset_));
}

PathSymProto::~PathSymProto() {
  // @@protoc_insertion_point(destructor:PathSymProto)
  SharedDtor();
}

void PathSymProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathSymProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathSymProto& PathSymProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_PathSymProto.base);
  return *internal_default_instance();
}


void PathSymProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathSymProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&step_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

bool PathSymProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PathSymProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PathSymProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathSymProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathSymProto)
  return false;
#undef DO_
}

void PathSymProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathSymProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PathSymProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double step = 2;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->step(), output);
  }

  // double offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->offset(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:PathSymProto)
}

size_t PathSymProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathSymProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double step = 2;
  if (this->step() != 0) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  if (this->offset() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSymProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PathSymProto*>(&from));
}

void PathSymProto::MergeFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathSymProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void PathSymProto::CopyFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathSymProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSymProto::IsInitialized() const {
  return true;
}

void PathSymProto::Swap(PathSymProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathSymProto::InternalSwap(PathSymProto* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_, other->step_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PathSymProto::GetTypeName() const {
  return "PathSymProto";
}


// ===================================================================

void LineRuleProto::InitAsDefaultInstance() {
  ::_LineRuleProto_default_instance_._instance.get_mutable()->dashdot_ = const_cast< ::DashDotProto*>(
      ::DashDotProto::internal_default_instance());
  ::_LineRuleProto_default_instance_._instance.get_mutable()->pathsym_ = const_cast< ::PathSymProto*>(
      ::PathSymProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineRuleProto::kWidthFieldNumber;
const int LineRuleProto::kColorFieldNumber;
const int LineRuleProto::kDashdotFieldNumber;
const int LineRuleProto::kPriorityFieldNumber;
const int LineRuleProto::kPathsymFieldNumber;
const int LineRuleProto::kJoinFieldNumber;
const int LineRuleProto::kCapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineRuleProto::LineRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_LineRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LineRuleProto)
}
LineRuleProto::LineRuleProto(const LineRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dashdot()) {
    dashdot_ = new ::DashDotProto(*from.dashdot_);
  } else {
    dashdot_ = NULL;
  }
  if (from.has_pathsym()) {
    pathsym_ = new ::PathSymProto(*from.pathsym_);
  } else {
    pathsym_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_)) + sizeof(cap_));
  // @@protoc_insertion_point(copy_constructor:LineRuleProto)
}

void LineRuleProto::SharedCtor() {
  ::memset(&dashdot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cap_) -
      reinterpret_cast<char*>(&dashdot_)) + sizeof(cap_));
}

LineRuleProto::~LineRuleProto() {
  // @@protoc_insertion_point(destructor:LineRuleProto)
  SharedDtor();
}

void LineRuleProto::SharedDtor() {
  if (this != internal_default_instance()) delete dashdot_;
  if (this != internal_default_instance()) delete pathsym_;
}

void LineRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineRuleProto& LineRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_LineRuleProto.base);
  return *internal_default_instance();
}


void LineRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) {
    delete dashdot_;
  }
  dashdot_ = NULL;
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) {
    delete pathsym_;
  }
  pathsym_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cap_) -
      reinterpret_cast<char*>(&width_)) + sizeof(cap_));
  _internal_metadata_.Clear();
}

bool LineRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:LineRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DashDotProto dashdot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dashdot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathSymProto pathsym = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pathsym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineJoin join = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join(static_cast< ::LineJoin >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineCap cap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cap(static_cast< ::LineCap >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LineRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LineRuleProto)
  return false;
#undef DO_
}

void LineRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LineRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_dashdot(), output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // .PathSymProto pathsym = 5;
  if (this->has_pathsym()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_pathsym(), output);
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->join(), output);
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cap(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:LineRuleProto)
}

size_t LineRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dashdot_);
  }

  // .PathSymProto pathsym = 5;
  if (this->has_pathsym()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pathsym_);
  }

  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join());
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineRuleProto*>(&from));
}

void LineRuleProto::MergeFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LineRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dashdot()) {
    mutable_dashdot()->::DashDotProto::MergeFrom(from.dashdot());
  }
  if (from.has_pathsym()) {
    mutable_pathsym()->::PathSymProto::MergeFrom(from.pathsym());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.join() != 0) {
    set_join(from.join());
  }
  if (from.cap() != 0) {
    set_cap(from.cap());
  }
}

void LineRuleProto::CopyFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRuleProto::IsInitialized() const {
  return true;
}

void LineRuleProto::Swap(LineRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineRuleProto::InternalSwap(LineRuleProto* other) {
  using std::swap;
  swap(dashdot_, other->dashdot_);
  swap(pathsym_, other->pathsym_);
  swap(width_, other->width_);
  swap(color_, other->color_);
  swap(priority_, other->priority_);
  swap(join_, other->join_);
  swap(cap_, other->cap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LineRuleProto::GetTypeName() const {
  return "LineRuleProto";
}


// ===================================================================

void LineDefProto::InitAsDefaultInstance() {
  ::_LineDefProto_default_instance_._instance.get_mutable()->dashdot_ = const_cast< ::DashDotProto*>(
      ::DashDotProto::internal_default_instance());
  ::_LineDefProto_default_instance_._instance.get_mutable()->pathsym_ = const_cast< ::PathSymProto*>(
      ::PathSymProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineDefProto::kWidthFieldNumber;
const int LineDefProto::kColorFieldNumber;
const int LineDefProto::kDashdotFieldNumber;
const int LineDefProto::kPathsymFieldNumber;
const int LineDefProto::kJoinFieldNumber;
const int LineDefProto::kCapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineDefProto::LineDefProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_LineDefProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LineDefProto)
}
LineDefProto::LineDefProto(const LineDefProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dashdot()) {
    dashdot_ = new ::DashDotProto(*from.dashdot_);
  } else {
    dashdot_ = NULL;
  }
  if (from.has_pathsym()) {
    pathsym_ = new ::PathSymProto(*from.pathsym_);
  } else {
    pathsym_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_)) + sizeof(cap_));
  // @@protoc_insertion_point(copy_constructor:LineDefProto)
}

void LineDefProto::SharedCtor() {
  ::memset(&dashdot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cap_) -
      reinterpret_cast<char*>(&dashdot_)) + sizeof(cap_));
}

LineDefProto::~LineDefProto() {
  // @@protoc_insertion_point(destructor:LineDefProto)
  SharedDtor();
}

void LineDefProto::SharedDtor() {
  if (this != internal_default_instance()) delete dashdot_;
  if (this != internal_default_instance()) delete pathsym_;
}

void LineDefProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineDefProto& LineDefProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_LineDefProto.base);
  return *internal_default_instance();
}


void LineDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) {
    delete dashdot_;
  }
  dashdot_ = NULL;
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) {
    delete pathsym_;
  }
  pathsym_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cap_) -
      reinterpret_cast<char*>(&width_)) + sizeof(cap_));
  _internal_metadata_.Clear();
}

bool LineDefProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:LineDefProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DashDotProto dashdot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dashdot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathSymProto pathsym = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pathsym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineJoin join = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join(static_cast< ::LineJoin >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineCap cap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cap(static_cast< ::LineCap >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LineDefProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LineDefProto)
  return false;
#undef DO_
}

void LineDefProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LineDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_dashdot(), output);
  }

  // .PathSymProto pathsym = 4;
  if (this->has_pathsym()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_pathsym(), output);
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->join(), output);
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cap(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:LineDefProto)
}

size_t LineDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineDefProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dashdot_);
  }

  // .PathSymProto pathsym = 4;
  if (this->has_pathsym()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pathsym_);
  }

  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join());
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineDefProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineDefProto*>(&from));
}

void LineDefProto::MergeFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LineDefProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dashdot()) {
    mutable_dashdot()->::DashDotProto::MergeFrom(from.dashdot());
  }
  if (from.has_pathsym()) {
    mutable_pathsym()->::PathSymProto::MergeFrom(from.pathsym());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.join() != 0) {
    set_join(from.join());
  }
  if (from.cap() != 0) {
    set_cap(from.cap());
  }
}

void LineDefProto::CopyFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineDefProto::IsInitialized() const {
  return true;
}

void LineDefProto::Swap(LineDefProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineDefProto::InternalSwap(LineDefProto* other) {
  using std::swap;
  swap(dashdot_, other->dashdot_);
  swap(pathsym_, other->pathsym_);
  swap(width_, other->width_);
  swap(color_, other->color_);
  swap(join_, other->join_);
  swap(cap_, other->cap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LineDefProto::GetTypeName() const {
  return "LineDefProto";
}


// ===================================================================

void AreaRuleProto::InitAsDefaultInstance() {
  ::_AreaRuleProto_default_instance_._instance.get_mutable()->border_ = const_cast< ::LineDefProto*>(
      ::LineDefProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AreaRuleProto::kColorFieldNumber;
const int AreaRuleProto::kBorderFieldNumber;
const int AreaRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AreaRuleProto::AreaRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_AreaRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AreaRuleProto)
}
AreaRuleProto::AreaRuleProto(const AreaRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_border()) {
    border_ = new ::LineDefProto(*from.border_);
  } else {
    border_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&color_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:AreaRuleProto)
}

void AreaRuleProto::SharedCtor() {
  ::memset(&border_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&border_)) + sizeof(priority_));
}

AreaRuleProto::~AreaRuleProto() {
  // @@protoc_insertion_point(destructor:AreaRuleProto)
  SharedDtor();
}

void AreaRuleProto::SharedDtor() {
  if (this != internal_default_instance()) delete border_;
}

void AreaRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AreaRuleProto& AreaRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_AreaRuleProto.base);
  return *internal_default_instance();
}


void AreaRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AreaRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&color_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool AreaRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AreaRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineDefProto border = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AreaRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AreaRuleProto)
  return false;
#undef DO_
}

void AreaRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AreaRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // .LineDefProto border = 2;
  if (this->has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_border(), output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:AreaRuleProto)
}

size_t AreaRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AreaRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .LineDefProto border = 2;
  if (this->has_border()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *border_);
  }

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AreaRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AreaRuleProto*>(&from));
}

void AreaRuleProto::MergeFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AreaRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_border()) {
    mutable_border()->::LineDefProto::MergeFrom(from.border());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void AreaRuleProto::CopyFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AreaRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaRuleProto::IsInitialized() const {
  return true;
}

void AreaRuleProto::Swap(AreaRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AreaRuleProto::InternalSwap(AreaRuleProto* other) {
  using std::swap;
  swap(border_, other->border_);
  swap(color_, other->color_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AreaRuleProto::GetTypeName() const {
  return "AreaRuleProto";
}


// ===================================================================

void SymbolRuleProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolRuleProto::kNameFieldNumber;
const int SymbolRuleProto::kApplyForTypeFieldNumber;
const int SymbolRuleProto::kPriorityFieldNumber;
const int SymbolRuleProto::kMinDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolRuleProto::SymbolRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_SymbolRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SymbolRuleProto)
}
SymbolRuleProto::SymbolRuleProto(const SymbolRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&apply_for_type_, &from.apply_for_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_distance_) -
    reinterpret_cast<char*>(&apply_for_type_)) + sizeof(min_distance_));
  // @@protoc_insertion_point(copy_constructor:SymbolRuleProto)
}

void SymbolRuleProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&apply_for_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_distance_) -
      reinterpret_cast<char*>(&apply_for_type_)) + sizeof(min_distance_));
}

SymbolRuleProto::~SymbolRuleProto() {
  // @@protoc_insertion_point(destructor:SymbolRuleProto)
  SharedDtor();
}

void SymbolRuleProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SymbolRuleProto& SymbolRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_SymbolRuleProto.base);
  return *internal_default_instance();
}


void SymbolRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SymbolRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&apply_for_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_distance_) -
      reinterpret_cast<char*>(&apply_for_type_)) + sizeof(min_distance_));
  _internal_metadata_.Clear();
}

bool SymbolRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SymbolRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SymbolRuleProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 apply_for_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_for_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SymbolRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SymbolRuleProto)
  return false;
#undef DO_
}

void SymbolRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SymbolRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SymbolRuleProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 apply_for_type = 2;
  if (this->apply_for_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->apply_for_type(), output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // int32 min_distance = 4;
  if (this->min_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_distance(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:SymbolRuleProto)
}

size_t SymbolRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SymbolRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 apply_for_type = 2;
  if (this->apply_for_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->apply_for_type());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int32 min_distance = 4;
  if (this->min_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SymbolRuleProto*>(&from));
}

void SymbolRuleProto::MergeFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SymbolRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.apply_for_type() != 0) {
    set_apply_for_type(from.apply_for_type());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.min_distance() != 0) {
    set_min_distance(from.min_distance());
  }
}

void SymbolRuleProto::CopyFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymbolRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRuleProto::IsInitialized() const {
  return true;
}

void SymbolRuleProto::Swap(SymbolRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolRuleProto::InternalSwap(SymbolRuleProto* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(apply_for_type_, other->apply_for_type_);
  swap(priority_, other->priority_);
  swap(min_distance_, other->min_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SymbolRuleProto::GetTypeName() const {
  return "SymbolRuleProto";
}


// ===================================================================

void CaptionDefProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptionDefProto::kHeightFieldNumber;
const int CaptionDefProto::kColorFieldNumber;
const int CaptionDefProto::kStrokeColorFieldNumber;
const int CaptionDefProto::kOffsetXFieldNumber;
const int CaptionDefProto::kOffsetYFieldNumber;
const int CaptionDefProto::kTextFieldNumber;
const int CaptionDefProto::kIsOptionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptionDefProto::CaptionDefProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_CaptionDefProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaptionDefProto)
}
CaptionDefProto::CaptionDefProto(const CaptionDefProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_optional_) -
    reinterpret_cast<char*>(&height_)) + sizeof(is_optional_));
  // @@protoc_insertion_point(copy_constructor:CaptionDefProto)
}

void CaptionDefProto::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_optional_) -
      reinterpret_cast<char*>(&height_)) + sizeof(is_optional_));
}

CaptionDefProto::~CaptionDefProto() {
  // @@protoc_insertion_point(destructor:CaptionDefProto)
  SharedDtor();
}

void CaptionDefProto::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaptionDefProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptionDefProto& CaptionDefProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_CaptionDefProto.base);
  return *internal_default_instance();
}


void CaptionDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_optional_) -
      reinterpret_cast<char*>(&height_)) + sizeof(is_optional_));
  _internal_metadata_.Clear();
}

bool CaptionDefProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CaptionDefProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stroke_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CaptionDefProto.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_optional = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CaptionDefProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CaptionDefProto)
  return false;
#undef DO_
}

void CaptionDefProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CaptionDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stroke_color(), output);
  }

  // int32 offset_x = 4;
  if (this->offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset_x(), output);
  }

  // int32 offset_y = 5;
  if (this->offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offset_y(), output);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CaptionDefProto.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // bool is_optional = 7;
  if (this->is_optional() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_optional(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:CaptionDefProto)
}

size_t CaptionDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionDefProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string text = 6;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_color());
  }

  // int32 offset_x = 4;
  if (this->offset_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset_x());
  }

  // int32 offset_y = 5;
  if (this->offset_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset_y());
  }

  // bool is_optional = 7;
  if (this->is_optional() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptionDefProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptionDefProto*>(&from));
}

void CaptionDefProto::MergeFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaptionDefProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.stroke_color() != 0) {
    set_stroke_color(from.stroke_color());
  }
  if (from.offset_x() != 0) {
    set_offset_x(from.offset_x());
  }
  if (from.offset_y() != 0) {
    set_offset_y(from.offset_y());
  }
  if (from.is_optional() != 0) {
    set_is_optional(from.is_optional());
  }
}

void CaptionDefProto::CopyFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionDefProto::IsInitialized() const {
  return true;
}

void CaptionDefProto::Swap(CaptionDefProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptionDefProto::InternalSwap(CaptionDefProto* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(color_, other->color_);
  swap(stroke_color_, other->stroke_color_);
  swap(offset_x_, other->offset_x_);
  swap(offset_y_, other->offset_y_);
  swap(is_optional_, other->is_optional_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CaptionDefProto::GetTypeName() const {
  return "CaptionDefProto";
}


// ===================================================================

void CaptionRuleProto::InitAsDefaultInstance() {
  ::_CaptionRuleProto_default_instance_._instance.get_mutable()->primary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  ::_CaptionRuleProto_default_instance_._instance.get_mutable()->secondary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptionRuleProto::kPrimaryFieldNumber;
const int CaptionRuleProto::kSecondaryFieldNumber;
const int CaptionRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptionRuleProto::CaptionRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_CaptionRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaptionRuleProto)
}
CaptionRuleProto::CaptionRuleProto(const CaptionRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primary()) {
    primary_ = new ::CaptionDefProto(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_secondary()) {
    secondary_ = new ::CaptionDefProto(*from.secondary_);
  } else {
    secondary_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CaptionRuleProto)
}

void CaptionRuleProto::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(priority_));
}

CaptionRuleProto::~CaptionRuleProto() {
  // @@protoc_insertion_point(destructor:CaptionRuleProto)
  SharedDtor();
}

void CaptionRuleProto::SharedDtor() {
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete secondary_;
}

void CaptionRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptionRuleProto& CaptionRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_CaptionRuleProto.base);
  return *internal_default_instance();
}


void CaptionRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) {
    delete secondary_;
  }
  secondary_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool CaptionRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CaptionRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CaptionDefProto primary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionDefProto secondary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CaptionRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CaptionRuleProto)
  return false;
#undef DO_
}

void CaptionRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CaptionRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_primary(), output);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_secondary(), output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:CaptionRuleProto)
}

size_t CaptionRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *secondary_);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptionRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptionRuleProto*>(&from));
}

void CaptionRuleProto::MergeFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaptionRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary()) {
    mutable_primary()->::CaptionDefProto::MergeFrom(from.primary());
  }
  if (from.has_secondary()) {
    mutable_secondary()->::CaptionDefProto::MergeFrom(from.secondary());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CaptionRuleProto::CopyFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionRuleProto::IsInitialized() const {
  return true;
}

void CaptionRuleProto::Swap(CaptionRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptionRuleProto::InternalSwap(CaptionRuleProto* other) {
  using std::swap;
  swap(primary_, other->primary_);
  swap(secondary_, other->secondary_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CaptionRuleProto::GetTypeName() const {
  return "CaptionRuleProto";
}


// ===================================================================

void CircleRuleProto::InitAsDefaultInstance() {
  ::_CircleRuleProto_default_instance_._instance.get_mutable()->border_ = const_cast< ::LineDefProto*>(
      ::LineDefProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircleRuleProto::kRadiusFieldNumber;
const int CircleRuleProto::kColorFieldNumber;
const int CircleRuleProto::kBorderFieldNumber;
const int CircleRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircleRuleProto::CircleRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_CircleRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CircleRuleProto)
}
CircleRuleProto::CircleRuleProto(const CircleRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_border()) {
    border_ = new ::LineDefProto(*from.border_);
  } else {
    border_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:CircleRuleProto)
}

void CircleRuleProto::SharedCtor() {
  ::memset(&border_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&border_)) + sizeof(priority_));
}

CircleRuleProto::~CircleRuleProto() {
  // @@protoc_insertion_point(destructor:CircleRuleProto)
  SharedDtor();
}

void CircleRuleProto::SharedDtor() {
  if (this != internal_default_instance()) delete border_;
}

void CircleRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CircleRuleProto& CircleRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_CircleRuleProto.base);
  return *internal_default_instance();
}


void CircleRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CircleRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool CircleRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CircleRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineDefProto border = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CircleRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CircleRuleProto)
  return false;
#undef DO_
}

void CircleRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CircleRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .LineDefProto border = 3;
  if (this->has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_border(), output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:CircleRuleProto)
}

size_t CircleRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CircleRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .LineDefProto border = 3;
  if (this->has_border()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *border_);
  }

  // double radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircleRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CircleRuleProto*>(&from));
}

void CircleRuleProto::MergeFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CircleRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_border()) {
    mutable_border()->::LineDefProto::MergeFrom(from.border());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CircleRuleProto::CopyFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CircleRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleRuleProto::IsInitialized() const {
  return true;
}

void CircleRuleProto::Swap(CircleRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircleRuleProto::InternalSwap(CircleRuleProto* other) {
  using std::swap;
  swap(border_, other->border_);
  swap(radius_, other->radius_);
  swap(color_, other->color_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CircleRuleProto::GetTypeName() const {
  return "CircleRuleProto";
}


// ===================================================================

void PathTextRuleProto::InitAsDefaultInstance() {
  ::_PathTextRuleProto_default_instance_._instance.get_mutable()->primary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  ::_PathTextRuleProto_default_instance_._instance.get_mutable()->secondary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathTextRuleProto::kPrimaryFieldNumber;
const int PathTextRuleProto::kSecondaryFieldNumber;
const int PathTextRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathTextRuleProto::PathTextRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_PathTextRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathTextRuleProto)
}
PathTextRuleProto::PathTextRuleProto(const PathTextRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primary()) {
    primary_ = new ::CaptionDefProto(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_secondary()) {
    secondary_ = new ::CaptionDefProto(*from.secondary_);
  } else {
    secondary_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:PathTextRuleProto)
}

void PathTextRuleProto::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(priority_));
}

PathTextRuleProto::~PathTextRuleProto() {
  // @@protoc_insertion_point(destructor:PathTextRuleProto)
  SharedDtor();
}

void PathTextRuleProto::SharedDtor() {
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete secondary_;
}

void PathTextRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathTextRuleProto& PathTextRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_PathTextRuleProto.base);
  return *internal_default_instance();
}


void PathTextRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathTextRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) {
    delete secondary_;
  }
  secondary_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool PathTextRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PathTextRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CaptionDefProto primary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionDefProto secondary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathTextRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathTextRuleProto)
  return false;
#undef DO_
}

void PathTextRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathTextRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_primary(), output);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_secondary(), output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:PathTextRuleProto)
}

size_t PathTextRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathTextRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *secondary_);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathTextRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PathTextRuleProto*>(&from));
}

void PathTextRuleProto::MergeFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathTextRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary()) {
    mutable_primary()->::CaptionDefProto::MergeFrom(from.primary());
  }
  if (from.has_secondary()) {
    mutable_secondary()->::CaptionDefProto::MergeFrom(from.secondary());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void PathTextRuleProto::CopyFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathTextRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTextRuleProto::IsInitialized() const {
  return true;
}

void PathTextRuleProto::Swap(PathTextRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathTextRuleProto::InternalSwap(PathTextRuleProto* other) {
  using std::swap;
  swap(primary_, other->primary_);
  swap(secondary_, other->secondary_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PathTextRuleProto::GetTypeName() const {
  return "PathTextRuleProto";
}


// ===================================================================

void ShieldRuleProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShieldRuleProto::kHeightFieldNumber;
const int ShieldRuleProto::kColorFieldNumber;
const int ShieldRuleProto::kStrokeColorFieldNumber;
const int ShieldRuleProto::kPriorityFieldNumber;
const int ShieldRuleProto::kMinDistanceFieldNumber;
const int ShieldRuleProto::kTextColorFieldNumber;
const int ShieldRuleProto::kTextStrokeColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShieldRuleProto::ShieldRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_ShieldRuleProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShieldRuleProto)
}
ShieldRuleProto::ShieldRuleProto(const ShieldRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_stroke_color_) -
    reinterpret_cast<char*>(&height_)) + sizeof(text_stroke_color_));
  // @@protoc_insertion_point(copy_constructor:ShieldRuleProto)
}

void ShieldRuleProto::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_stroke_color_) -
      reinterpret_cast<char*>(&height_)) + sizeof(text_stroke_color_));
}

ShieldRuleProto::~ShieldRuleProto() {
  // @@protoc_insertion_point(destructor:ShieldRuleProto)
  SharedDtor();
}

void ShieldRuleProto::SharedDtor() {
}

void ShieldRuleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShieldRuleProto& ShieldRuleProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_ShieldRuleProto.base);
  return *internal_default_instance();
}


void ShieldRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ShieldRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_stroke_color_) -
      reinterpret_cast<char*>(&height_)) + sizeof(text_stroke_color_));
  _internal_metadata_.Clear();
}

bool ShieldRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ShieldRuleProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stroke_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 text_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 text_stroke_color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShieldRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShieldRuleProto)
  return false;
#undef DO_
}

void ShieldRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShieldRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stroke_color(), output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // int32 min_distance = 5;
  if (this->min_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_distance(), output);
  }

  // uint32 text_color = 6;
  if (this->text_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->text_color(), output);
  }

  // uint32 text_stroke_color = 7;
  if (this->text_stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->text_stroke_color(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:ShieldRuleProto)
}

size_t ShieldRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShieldRuleProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int32 min_distance = 5;
  if (this->min_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_distance());
  }

  // uint32 text_color = 6;
  if (this->text_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->text_color());
  }

  // uint32 text_stroke_color = 7;
  if (this->text_stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->text_stroke_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShieldRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShieldRuleProto*>(&from));
}

void ShieldRuleProto::MergeFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShieldRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.stroke_color() != 0) {
    set_stroke_color(from.stroke_color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.min_distance() != 0) {
    set_min_distance(from.min_distance());
  }
  if (from.text_color() != 0) {
    set_text_color(from.text_color());
  }
  if (from.text_stroke_color() != 0) {
    set_text_stroke_color(from.text_stroke_color());
  }
}

void ShieldRuleProto::CopyFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShieldRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldRuleProto::IsInitialized() const {
  return true;
}

void ShieldRuleProto::Swap(ShieldRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShieldRuleProto::InternalSwap(ShieldRuleProto* other) {
  using std::swap;
  swap(height_, other->height_);
  swap(color_, other->color_);
  swap(stroke_color_, other->stroke_color_);
  swap(priority_, other->priority_);
  swap(min_distance_, other->min_distance_);
  swap(text_color_, other->text_color_);
  swap(text_stroke_color_, other->text_stroke_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ShieldRuleProto::GetTypeName() const {
  return "ShieldRuleProto";
}


// ===================================================================

void DrawElementProto::InitAsDefaultInstance() {
  ::_DrawElementProto_default_instance_._instance.get_mutable()->area_ = const_cast< ::AreaRuleProto*>(
      ::AreaRuleProto::internal_default_instance());
  ::_DrawElementProto_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::SymbolRuleProto*>(
      ::SymbolRuleProto::internal_default_instance());
  ::_DrawElementProto_default_instance_._instance.get_mutable()->caption_ = const_cast< ::CaptionRuleProto*>(
      ::CaptionRuleProto::internal_default_instance());
  ::_DrawElementProto_default_instance_._instance.get_mutable()->circle_ = const_cast< ::CircleRuleProto*>(
      ::CircleRuleProto::internal_default_instance());
  ::_DrawElementProto_default_instance_._instance.get_mutable()->path_text_ = const_cast< ::PathTextRuleProto*>(
      ::PathTextRuleProto::internal_default_instance());
  ::_DrawElementProto_default_instance_._instance.get_mutable()->shield_ = const_cast< ::ShieldRuleProto*>(
      ::ShieldRuleProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawElementProto::kScaleFieldNumber;
const int DrawElementProto::kLinesFieldNumber;
const int DrawElementProto::kAreaFieldNumber;
const int DrawElementProto::kSymbolFieldNumber;
const int DrawElementProto::kCaptionFieldNumber;
const int DrawElementProto::kCircleFieldNumber;
const int DrawElementProto::kPathTextFieldNumber;
const int DrawElementProto::kShieldFieldNumber;
const int DrawElementProto::kApplyIfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawElementProto::DrawElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_DrawElementProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrawElementProto)
}
DrawElementProto::DrawElementProto(const DrawElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      lines_(from.lines_),
      apply_if_(from.apply_if_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_area()) {
    area_ = new ::AreaRuleProto(*from.area_);
  } else {
    area_ = NULL;
  }
  if (from.has_symbol()) {
    symbol_ = new ::SymbolRuleProto(*from.symbol_);
  } else {
    symbol_ = NULL;
  }
  if (from.has_caption()) {
    caption_ = new ::CaptionRuleProto(*from.caption_);
  } else {
    caption_ = NULL;
  }
  if (from.has_circle()) {
    circle_ = new ::CircleRuleProto(*from.circle_);
  } else {
    circle_ = NULL;
  }
  if (from.has_path_text()) {
    path_text_ = new ::PathTextRuleProto(*from.path_text_);
  } else {
    path_text_ = NULL;
  }
  if (from.has_shield()) {
    shield_ = new ::ShieldRuleProto(*from.shield_);
  } else {
    shield_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:DrawElementProto)
}

void DrawElementProto::SharedCtor() {
  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&area_)) + sizeof(scale_));
}

DrawElementProto::~DrawElementProto() {
  // @@protoc_insertion_point(destructor:DrawElementProto)
  SharedDtor();
}

void DrawElementProto::SharedDtor() {
  if (this != internal_default_instance()) delete area_;
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete caption_;
  if (this != internal_default_instance()) delete circle_;
  if (this != internal_default_instance()) delete path_text_;
  if (this != internal_default_instance()) delete shield_;
}

void DrawElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawElementProto& DrawElementProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_DrawElementProto.base);
  return *internal_default_instance();
}


void DrawElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DrawElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  apply_if_.Clear();
  if (GetArenaNoVirtual() == NULL && area_ != NULL) {
    delete area_;
  }
  area_ = NULL;
  if (GetArenaNoVirtual() == NULL && symbol_ != NULL) {
    delete symbol_;
  }
  symbol_ = NULL;
  if (GetArenaNoVirtual() == NULL && caption_ != NULL) {
    delete caption_;
  }
  caption_ = NULL;
  if (GetArenaNoVirtual() == NULL && circle_ != NULL) {
    delete circle_;
  }
  circle_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_text_ != NULL) {
    delete path_text_;
  }
  path_text_ = NULL;
  if (GetArenaNoVirtual() == NULL && shield_ != NULL) {
    delete shield_;
  }
  shield_ = NULL;
  scale_ = 0;
  _internal_metadata_.Clear();
}

bool DrawElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DrawElementProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .LineRuleProto lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AreaRuleProto area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SymbolRuleProto symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionRuleProto caption = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CircleRuleProto circle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathTextRuleProto path_text = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ShieldRuleProto shield = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string apply_if = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_apply_if()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apply_if(this->apply_if_size() - 1).data(),
            static_cast<int>(this->apply_if(this->apply_if_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DrawElementProto.apply_if"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DrawElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DrawElementProto)
  return false;
#undef DO_
}

void DrawElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DrawElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // repeated .LineRuleProto lines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->lines(static_cast<int>(i)),
      output);
  }

  // .AreaRuleProto area = 3;
  if (this->has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_area(), output);
  }

  // .SymbolRuleProto symbol = 4;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_symbol(), output);
  }

  // .CaptionRuleProto caption = 5;
  if (this->has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_caption(), output);
  }

  // .CircleRuleProto circle = 6;
  if (this->has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_circle(), output);
  }

  // .PathTextRuleProto path_text = 7;
  if (this->has_path_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_path_text(), output);
  }

  // .ShieldRuleProto shield = 8;
  if (this->has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_shield(), output);
  }

  // repeated string apply_if = 9;
  for (int i = 0, n = this->apply_if_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_if(i).data(), static_cast<int>(this->apply_if(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DrawElementProto.apply_if");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->apply_if(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:DrawElementProto)
}

size_t DrawElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrawElementProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .LineRuleProto lines = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lines(static_cast<int>(i)));
    }
  }

  // repeated string apply_if = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->apply_if_size());
  for (int i = 0, n = this->apply_if_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->apply_if(i));
  }

  // .AreaRuleProto area = 3;
  if (this->has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *area_);
  }

  // .SymbolRuleProto symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .CaptionRuleProto caption = 5;
  if (this->has_caption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *caption_);
  }

  // .CircleRuleProto circle = 6;
  if (this->has_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *circle_);
  }

  // .PathTextRuleProto path_text = 7;
  if (this->has_path_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_text_);
  }

  // .ShieldRuleProto shield = 8;
  if (this->has_shield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shield_);
  }

  // int32 scale = 1;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrawElementProto*>(&from));
}

void DrawElementProto::MergeFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrawElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  apply_if_.MergeFrom(from.apply_if_);
  if (from.has_area()) {
    mutable_area()->::AreaRuleProto::MergeFrom(from.area());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::SymbolRuleProto::MergeFrom(from.symbol());
  }
  if (from.has_caption()) {
    mutable_caption()->::CaptionRuleProto::MergeFrom(from.caption());
  }
  if (from.has_circle()) {
    mutable_circle()->::CircleRuleProto::MergeFrom(from.circle());
  }
  if (from.has_path_text()) {
    mutable_path_text()->::PathTextRuleProto::MergeFrom(from.path_text());
  }
  if (from.has_shield()) {
    mutable_shield()->::ShieldRuleProto::MergeFrom(from.shield());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void DrawElementProto::CopyFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrawElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawElementProto::IsInitialized() const {
  return true;
}

void DrawElementProto::Swap(DrawElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawElementProto::InternalSwap(DrawElementProto* other) {
  using std::swap;
  CastToBase(&lines_)->InternalSwap(CastToBase(&other->lines_));
  apply_if_.InternalSwap(CastToBase(&other->apply_if_));
  swap(area_, other->area_);
  swap(symbol_, other->symbol_);
  swap(caption_, other->caption_);
  swap(circle_, other->circle_);
  swap(path_text_, other->path_text_);
  swap(shield_, other->shield_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DrawElementProto::GetTypeName() const {
  return "DrawElementProto";
}


// ===================================================================

void ClassifElementProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassifElementProto::kNameFieldNumber;
const int ClassifElementProto::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassifElementProto::ClassifElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_ClassifElementProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassifElementProto)
}
ClassifElementProto::ClassifElementProto(const ClassifElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:ClassifElementProto)
}

void ClassifElementProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClassifElementProto::~ClassifElementProto() {
  // @@protoc_insertion_point(destructor:ClassifElementProto)
  SharedDtor();
}

void ClassifElementProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClassifElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassifElementProto& ClassifElementProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_ClassifElementProto.base);
  return *internal_default_instance();
}


void ClassifElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ClassifElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ClassifElementProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ClassifElementProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DrawElementProto element = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassifElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassifElementProto)
  return false;
#undef DO_
}

void ClassifElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassifElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClassifElementProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .DrawElementProto element = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->element(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:ClassifElementProto)
}

size_t ClassifElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassifElementProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .DrawElementProto element = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClassifElementProto*>(&from));
}

void ClassifElementProto::MergeFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassifElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ClassifElementProto::CopyFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifElementProto::IsInitialized() const {
  return true;
}

void ClassifElementProto::Swap(ClassifElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassifElementProto::InternalSwap(ClassifElementProto* other) {
  using std::swap;
  CastToBase(&element_)->InternalSwap(CastToBase(&other->element_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClassifElementProto::GetTypeName() const {
  return "ClassifElementProto";
}


// ===================================================================

void ColorElementProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorElementProto::kNameFieldNumber;
const int ColorElementProto::kColorFieldNumber;
const int ColorElementProto::kXFieldNumber;
const int ColorElementProto::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorElementProto::ColorElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_ColorElementProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColorElementProto)
}
ColorElementProto::ColorElementProto(const ColorElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&color_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ColorElementProto)
}

void ColorElementProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&color_)) + sizeof(y_));
}

ColorElementProto::~ColorElementProto() {
  // @@protoc_insertion_point(destructor:ColorElementProto)
  SharedDtor();
}

void ColorElementProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColorElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorElementProto& ColorElementProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_ColorElementProto.base);
  return *internal_default_instance();
}


void ColorElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&color_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool ColorElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ColorElementProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ColorElementProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColorElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColorElementProto)
  return false;
#undef DO_
}

void ColorElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColorElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColorElementProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:ColorElementProto)
}

size_t ColorElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorElementProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColorElementProto*>(&from));
}

void ColorElementProto::MergeFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColorElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ColorElementProto::CopyFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorElementProto::IsInitialized() const {
  return true;
}

void ColorElementProto::Swap(ColorElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorElementProto::InternalSwap(ColorElementProto* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ColorElementProto::GetTypeName() const {
  return "ColorElementProto";
}


// ===================================================================

void ColorsElementProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorsElementProto::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorsElementProto::ColorsElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_ColorsElementProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColorsElementProto)
}
ColorsElementProto::ColorsElementProto(const ColorsElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColorsElementProto)
}

void ColorsElementProto::SharedCtor() {
}

ColorsElementProto::~ColorsElementProto() {
  // @@protoc_insertion_point(destructor:ColorsElementProto)
  SharedDtor();
}

void ColorsElementProto::SharedDtor() {
}

void ColorsElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorsElementProto& ColorsElementProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_ColorsElementProto.base);
  return *internal_default_instance();
}


void ColorsElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorsElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool ColorsElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ColorsElementProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ColorElementProto value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColorsElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColorsElementProto)
  return false;
#undef DO_
}

void ColorsElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColorsElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ColorElementProto value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->value(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:ColorsElementProto)
}

size_t ColorsElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorsElementProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .ColorElementProto value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorsElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColorsElementProto*>(&from));
}

void ColorsElementProto::MergeFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColorsElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void ColorsElementProto::CopyFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorsElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorsElementProto::IsInitialized() const {
  return true;
}

void ColorsElementProto::Swap(ColorsElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorsElementProto::InternalSwap(ColorsElementProto* other) {
  using std::swap;
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ColorsElementProto::GetTypeName() const {
  return "ColorsElementProto";
}


// ===================================================================

void ContainerProto::InitAsDefaultInstance() {
  ::_ContainerProto_default_instance_._instance.get_mutable()->colors_ = const_cast< ::ColorsElementProto*>(
      ::ColorsElementProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerProto::kContFieldNumber;
const int ContainerProto::kColorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerProto::ContainerProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_drules_5fstruct_2eproto::scc_info_ContainerProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContainerProto)
}
ContainerProto::ContainerProto(const ContainerProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      cont_(from.cont_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_colors()) {
    colors_ = new ::ColorsElementProto(*from.colors_);
  } else {
    colors_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ContainerProto)
}

void ContainerProto::SharedCtor() {
  colors_ = NULL;
}

ContainerProto::~ContainerProto() {
  // @@protoc_insertion_point(destructor:ContainerProto)
  SharedDtor();
}

void ContainerProto::SharedDtor() {
  if (this != internal_default_instance()) delete colors_;
}

void ContainerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerProto& ContainerProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_drules_5fstruct_2eproto::scc_info_ContainerProto.base);
  return *internal_default_instance();
}


void ContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ContainerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cont_.Clear();
  if (GetArenaNoVirtual() == NULL && colors_ != NULL) {
    delete colors_;
  }
  colors_ = NULL;
  _internal_metadata_.Clear();
}

bool ContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ContainerProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClassifElementProto cont = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cont()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ColorsElementProto colors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContainerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContainerProto)
  return false;
#undef DO_
}

void ContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContainerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ClassifElementProto cont = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cont_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->cont(static_cast<int>(i)),
      output);
  }

  // .ColorsElementProto colors = 2;
  if (this->has_colors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_colors(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:ContainerProto)
}

size_t ContainerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContainerProto)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .ClassifElementProto cont = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cont_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cont(static_cast<int>(i)));
    }
  }

  // .ColorsElementProto colors = 2;
  if (this->has_colors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *colors_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContainerProto*>(&from));
}

void ContainerProto::MergeFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContainerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cont_.MergeFrom(from.cont_);
  if (from.has_colors()) {
    mutable_colors()->::ColorsElementProto::MergeFrom(from.colors());
  }
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerProto::IsInitialized() const {
  return true;
}

void ContainerProto::Swap(ContainerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerProto::InternalSwap(ContainerProto* other) {
  using std::swap;
  CastToBase(&cont_)->InternalSwap(CastToBase(&other->cont_));
  swap(colors_, other->colors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ContainerProto::GetTypeName() const {
  return "ContainerProto";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DashDotProto* Arena::CreateMaybeMessage< ::DashDotProto >(Arena* arena) {
  return Arena::CreateInternal< ::DashDotProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PathSymProto* Arena::CreateMaybeMessage< ::PathSymProto >(Arena* arena) {
  return Arena::CreateInternal< ::PathSymProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LineRuleProto* Arena::CreateMaybeMessage< ::LineRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::LineRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LineDefProto* Arena::CreateMaybeMessage< ::LineDefProto >(Arena* arena) {
  return Arena::CreateInternal< ::LineDefProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AreaRuleProto* Arena::CreateMaybeMessage< ::AreaRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::AreaRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SymbolRuleProto* Arena::CreateMaybeMessage< ::SymbolRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::SymbolRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CaptionDefProto* Arena::CreateMaybeMessage< ::CaptionDefProto >(Arena* arena) {
  return Arena::CreateInternal< ::CaptionDefProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CaptionRuleProto* Arena::CreateMaybeMessage< ::CaptionRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::CaptionRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CircleRuleProto* Arena::CreateMaybeMessage< ::CircleRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::CircleRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PathTextRuleProto* Arena::CreateMaybeMessage< ::PathTextRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::PathTextRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ShieldRuleProto* Arena::CreateMaybeMessage< ::ShieldRuleProto >(Arena* arena) {
  return Arena::CreateInternal< ::ShieldRuleProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DrawElementProto* Arena::CreateMaybeMessage< ::DrawElementProto >(Arena* arena) {
  return Arena::CreateInternal< ::DrawElementProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ClassifElementProto* Arena::CreateMaybeMessage< ::ClassifElementProto >(Arena* arena) {
  return Arena::CreateInternal< ::ClassifElementProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ColorElementProto* Arena::CreateMaybeMessage< ::ColorElementProto >(Arena* arena) {
  return Arena::CreateInternal< ::ColorElementProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ColorsElementProto* Arena::CreateMaybeMessage< ::ColorsElementProto >(Arena* arena) {
  return Arena::CreateInternal< ::ColorsElementProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContainerProto* Arena::CreateMaybeMessage< ::ContainerProto >(Arena* arena) {
  return Arena::CreateInternal< ::ContainerProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
